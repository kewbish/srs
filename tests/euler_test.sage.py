

# This file was *autogenerated* from the file euler_test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_10 = Integer(10); _sage_const_20 = Integer(20)
from sage.misc.prandom import randint
from typing import Union

def euler_primality(n: int, k: int, a: int = _sage_const_0 ) -> bool:
    """
    Returns True if number is probably prime.
    Returns False if number is composite.
    """
    if n == _sage_const_1  or n == _sage_const_4 :
        return False
    elif n == _sage_const_2  or n == _sage_const_3 :
        return True
    elif n % _sage_const_2  == _sage_const_0 :
        return False
    for _ in range(k):
        if a == _sage_const_0 :
            a = randint(_sage_const_2 , n - _sage_const_2 )
        expted = power_mod(a, (n - _sage_const_1 ) // _sage_const_2 , n)
        if expted != jacobi_symbol(a, n):
            return False
    return True

if __name__ == "__main__":
    for n in range(_sage_const_1 , _sage_const_10 **_sage_const_4 ):
        euler_res = euler_primality(n, _sage_const_20 )
        sage_res = is_prime(n)
        if not euler_res:
            # Euler composite
            print(f"Composite: {n}")
        elif euler_res and not sage_res:
            # Euler primality returns True, Sage returns False
            print(f"Euler pseudoprime: {n}")
        elif euler_res:
            # Euler primality True
            print(f"Prime: {n}, Sage: {sage_res}, Fermat: {euler_res}")


