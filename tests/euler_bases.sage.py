

# This file was *autogenerated* from the file euler_bases.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_10 = Integer(10); _sage_const_1000000 = Integer(1000000); _sage_const_2000000 = Integer(2000000); _sage_const_5 = Integer(5); _sage_const_100 = Integer(100); _sage_const_3p = RealNumber('3.')
from collections import defaultdict
from sage.misc.prandom import randint
from typing import Union

def euler_primality(n: int, k: int, a: int = _sage_const_0 ) -> Union[bool, tuple[bool, int]]:
    """
    Returns True if number is probably prime.
    Returns False, Fermat witness: int if number is composite.
    """
    if n == _sage_const_1  or n == _sage_const_4 :
        return False
    elif n == _sage_const_2  or n == _sage_const_3 :
        return True
    for _ in range(k):
        if a == _sage_const_0 :
            a = randint(_sage_const_2 , n - _sage_const_2 )
        expted = power_mod(a, (n - _sage_const_1 ) // _sage_const_2 , n)
        if expted not in (_sage_const_1 , n - _sage_const_1 ):
            return False, a
    return True

if __name__ == "__main__":
    results = defaultdict(int)
    randints = []
    for _ in range(_sage_const_10 **_sage_const_3 ):
        rand = randint(_sage_const_1000000 , _sage_const_2000000 )
        sage_rand = is_prime(rand)
        randints.append((rand, sage_rand))
    for k in range(_sage_const_5 , _sage_const_100 ):
        pprimes = _sage_const_0 
        for _ in range(_sage_const_3 ):
            for n, is_prime in randints:
                euler_res = euler_primality(n, k)
                if type(euler_res) == bool and not is_prime:
                    # Euler primality returns True, Sage returns False
                    print(f"Euler pseudoprime: {n}, tries: {k}")
                    pprimes += _sage_const_1 
            results[k] += pprimes
        results[k] = numerical_approx(results[k] / _sage_const_3p , digits=_sage_const_2 )
    print(results)
    print(sorted(results.items(), key=lambda x: x[_sage_const_1 ])[_sage_const_0 ])


