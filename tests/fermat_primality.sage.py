

# This file was *autogenerated* from the file fermat_primality.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_10 = Integer(10); _sage_const_20 = Integer(20); _sage_const_0 = Integer(0)
from sage.misc.prandom import randint
from typing import Union

def fermat_primality(n: int, k: int) -> Union[bool, tuple[bool, int]]:
    """
    Returns True if number is probably prime.
    Returns False, Fermat witness: int if number is composite.
    """
    if n == _sage_const_1  or n == _sage_const_4 :
        return False
    elif n == _sage_const_2  or n == _sage_const_3 :
        return True
    for _ in range(k):
        a = randint(_sage_const_2 , n - _sage_const_2 )
        if power_mod(a, n - _sage_const_1 , n) != _sage_const_1 :
            return False, a
    return True

if __name__ == "__main__":
    for n in range(_sage_const_1 , _sage_const_10 **_sage_const_3 ):
        fermat_res = fermat_primality(n, _sage_const_20 )
        sage_res = is_prime(n)
        if type(fermat_res) == tuple:
            if fermat_res[_sage_const_0 ] == False:
                # Fermat composite
                print(f"Composite: {n}, witness: {fermat_res[_sage_const_1 ]}")
        elif type(fermat_res) == bool and not sage_res:
            # Fermat primality returns True, Sage returns False
            print(f"Fermat liar: {n}")
        elif fermat_res:
            # Fermat primality true
            print(f"Prime: {n}, Sage: {sage_res}, Fermat: {fermat_res}")


